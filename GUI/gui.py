import pygame
import sys

sys.path.append(".")
from data_processing.database import Card, CardDatabase
from operations.config import Config
from GUI.components import *
from GUI.stages import *


class GUI:
    def __init__(self):
        """
        There are 3 stages of the GUI:
            1. Title page
            2. Setting page
            3. Game page
        """
        self.current_stage = 0
        pygame.init()
        self.width, self.height = 1000, 700
        self.fps = 60
        self.screen = pygame.display.set_mode((self.width, self.height))
        pygame.display.set_caption("Card Game Designer")
        self.font = pygame.font.Font(None, 30)
        self.clock = pygame.time.Clock()
        self.running = True
        self.stages = [Openning(), Setting(), Game()]
        self.cards = [] # cards in user's hand

    def events(self):
        """
        Process the events in the game.

        This method handles the events generated by the user, such as mouse clicks or keyboard inputs.
        It checks for the quit event to exit the game, and delegates the handling of other events to the
        current stage of the game.

        Returns:
            bool: False if the operation is quit. True otherwise.
        """
        next_stage = self.current_stage
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return False
            else:
                next_stage = self.stages[self.current_stage].handle_events(event)

            if next_stage == -1:
                return False
            elif next_stage != self.current_stage:
                self.update_stage(next_stage)
        return True

    def update_stage(self, stage: int):
        """
        Update the stage of the gui.
        """
        if stage == 2:
            self.config = self.stages[self.current_stage].get_config()
        self.current_stage = stage
        pass

    def display_stage(self):
        """
        Display the current stage of the game.
        """
        self.clock.tick(self.fps)
        #print cards for users
        if self.current_stage == 2:
            self.stages[self.current_stage].update(self.cards)
        else: 
            self.stages[self.current_stage].update()
        pygame.display.flip()


if __name__ == "__main__":
    gui = GUI()
    while True:
        if not gui.events(): break
        gui.display_stage()
    pygame.quit()
    sys.exit()
